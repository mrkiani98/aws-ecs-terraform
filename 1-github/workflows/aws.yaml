on:
  push:
    branches:
      - "main"
env:
  TF_VAR_dynamodb_table_name: kiani-table
  AWS_REGION_NAME: ap-southeast-1

name: Deploy to Amazon ECS
jobs:
  deploy:
    name: DeployECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: terraform setup
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ~1.1.0
        terraform_wrapper: false
    - name: terrafrom init
      run: |
        terraform -chdir="./terraform-manifests" init
      id: terrafrom-init
    - name: apply terraform manifests
      id: terraform-apply
      run: |
        terraform -chdir="./terraform-manifests" apply --auto-approve
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: kiani
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the roles ARN in the taskdef file
      id : iam-roles
      run: |
        exec_role_parameter=$(terraform -chdir="./terraform-manifests" output ecs_task_execution_role_arn | tr -d '"' )
        task_role_parameter=$(terraform -chdir="./terraform-manifests" output ecs_task_connect_to_dynamodb | tr -d '"' )
        echo "$(jq --arg exec_role_parameter "$exec_role_parameter" '.executionRoleArn = $exec_role_parameter' taskdef.json)" > taskdef.json
        echo "$(jq --arg task_role_parameter "$task_role_parameter" '.taskRoleArn = $task_role_parameter' taskdef.json)" > taskdef.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: taskdef.json
        container-name: kiani-app
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
            KIANI_DYNAMODB_TABLE=${{ env.TF_VAR_dynamodb_table_name }}
            KIANI_DYNAMODB_REGION=${{ env.AWS_REGION_NAME }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: kiani-service
        cluster: kiani-stg
        wait-for-service-stability: true